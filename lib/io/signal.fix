// Unix signal handling
module Minilib.IO.Signal;

import Minilib.IO.Errno;

// An array of supported signal names.
signal_names: Array String;
signal_names = [
    "SIGHUP",
    "SIGINT",
    "SIGQUIT",
    "SIGILL",
    "SIGTRAP",
    "SIGABRT",
    "SIGIOT",
    "SIGBUS",
    "SIGFPE",
    "SIGKILL",
    "SIGUSR1",
    "SIGSEGV",
    "SIGUSR2",
    "SIGPIPE",
    "SIGALRM",
    "SIGTERM",
    "SIGSTKFLT",
    "SIGCHLD",
    "SIGCONT",
    "SIGSTOP",
    "SIGTSTP",
    "SIGTTIN",
    "SIGTTOU",
    "SIGURG",
    "SIGXCPU",
    "SIGXFSZ",
    "SIGVTALRM",
    "SIGPROF",
    "SIGWINCH",
    "SIGIO",
    "SIGPWR",
    "SIGSYS",
];

// An array of supported signal handler names.
sighandler_names: Array String;
sighandler_names = [
    "SIG_IGN",
    "SIG_DFL"
];

// `set_signal_handler(signal_name, sighandle_name)` sets the handler for the signal.
// `signal_name` should be one of `signal_names`.
// `sighandle_name` should be one of `sighandler_names`.
set_signal_handler: String -> String -> IOFail ();
set_signal_handler = |signal_name, sighandler_name| (
    from_io_result $
    signal_name.borrow_c_str_io(|p_signal_name|
        sighandler_name.borrow_c_str_io(|p_sighandler_name|
            let res = *FFI_CALL_IO[CInt minilib_io_signal_set_signal_handler(Ptr, Ptr),
                p_signal_name,
                p_sighandler_name];
            if res.to_I64 != 0 {
                pure $ err $ "set_signal_handler failed!: " + *get_last_error
            };
            pure $ ok $ ()
        )
    )
);

kill_process: I64 -> String -> IOFail ();
kill_process = |pid, signal_name| (
    from_io_result $
    signal_name.borrow_c_str_io(|p_signal_name|
        let res = *FFI_CALL_IO[CInt minilib_io_signal_kill_process(CInt, Ptr),
            pid.to_CInt,
            p_signal_name];
        if res.to_I64 != 0 {
            pure $ err $ "kill_process failed!: " + *get_last_error
        };
        pure $ ok $ ()
    )
);