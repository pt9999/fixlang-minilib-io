module PlatformTest;

import Minilib.Encoding.Binary;
import Minilib.IO.Platform;
import Minilib.Text.StringEx;
import Minilib.Testing.UnitTest;

test_get_uname: TestCase;
test_get_uname = (
    make_test("get_uname") $ |_| (
        let uname = *get_uname;
        when(true,
            println("uname:");;
            println("  sysname=" + uname.@sysname);;
            println("  nodename=" + uname.@nodename);;
            println("  release=" + uname.@release);;
            println("  version=" + uname.@version);;
            println("  machine=" + uname.@machine);;
            pure()
        ).lift;;
        assert_true("sysname", uname.@sysname != "");;
        assert_true("nodename", uname.@nodename != "");;
        assert_true("release", uname.@release != "");;
        assert_true("version", uname.@version != "");;
        assert_true("machine", uname.@machine != "");;
        pure()
    )
);

test_byte_order: TestCase;
test_byte_order = (
    make_test("test_byte_order") $ |_| (
        assert_true("byte_order", Platform::byte_order.is_little_endian)
    )
);

main: IO ();
main = (
    [
        test_get_uname,
        test_byte_order,
        TestCase::empty
    ]
    .run_test_driver
);

